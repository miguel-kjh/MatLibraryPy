# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _matrix
else:
    import _matrix

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _matrix.delete_SwigPyIterator

    def value(self):
        return _matrix.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _matrix.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _matrix.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _matrix.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _matrix.SwigPyIterator_equal(self, x)

    def copy(self):
        return _matrix.SwigPyIterator_copy(self)

    def next(self):
        return _matrix.SwigPyIterator_next(self)

    def __next__(self):
        return _matrix.SwigPyIterator___next__(self)

    def previous(self):
        return _matrix.SwigPyIterator_previous(self)

    def advance(self, n):
        return _matrix.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _matrix.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _matrix.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _matrix.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _matrix.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _matrix.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _matrix.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _matrix:
_matrix.SwigPyIterator_swigregister(SwigPyIterator)

class line(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _matrix.line_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _matrix.line___nonzero__(self)

    def __bool__(self):
        return _matrix.line___bool__(self)

    def __len__(self):
        return _matrix.line___len__(self)

    def __getslice__(self, i, j):
        return _matrix.line___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _matrix.line___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _matrix.line___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _matrix.line___delitem__(self, *args)

    def __getitem__(self, *args):
        return _matrix.line___getitem__(self, *args)

    def __setitem__(self, *args):
        return _matrix.line___setitem__(self, *args)

    def pop(self):
        return _matrix.line_pop(self)

    def append(self, x):
        return _matrix.line_append(self, x)

    def empty(self):
        return _matrix.line_empty(self)

    def size(self):
        return _matrix.line_size(self)

    def swap(self, v):
        return _matrix.line_swap(self, v)

    def begin(self):
        return _matrix.line_begin(self)

    def end(self):
        return _matrix.line_end(self)

    def rbegin(self):
        return _matrix.line_rbegin(self)

    def rend(self):
        return _matrix.line_rend(self)

    def clear(self):
        return _matrix.line_clear(self)

    def get_allocator(self):
        return _matrix.line_get_allocator(self)

    def pop_back(self):
        return _matrix.line_pop_back(self)

    def erase(self, *args):
        return _matrix.line_erase(self, *args)

    def __init__(self, *args):
        _matrix.line_swiginit(self, _matrix.new_line(*args))

    def push_back(self, x):
        return _matrix.line_push_back(self, x)

    def front(self):
        return _matrix.line_front(self)

    def back(self):
        return _matrix.line_back(self)

    def assign(self, n, x):
        return _matrix.line_assign(self, n, x)

    def resize(self, *args):
        return _matrix.line_resize(self, *args)

    def insert(self, *args):
        return _matrix.line_insert(self, *args)

    def reserve(self, n):
        return _matrix.line_reserve(self, n)

    def capacity(self):
        return _matrix.line_capacity(self)
    __swig_destroy__ = _matrix.delete_line

# Register line in _matrix:
_matrix.line_swigregister(line)

class vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _matrix.vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _matrix.vector___nonzero__(self)

    def __bool__(self):
        return _matrix.vector___bool__(self)

    def __len__(self):
        return _matrix.vector___len__(self)

    def __getslice__(self, i, j):
        return _matrix.vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _matrix.vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _matrix.vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _matrix.vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _matrix.vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _matrix.vector___setitem__(self, *args)

    def pop(self):
        return _matrix.vector_pop(self)

    def append(self, x):
        return _matrix.vector_append(self, x)

    def empty(self):
        return _matrix.vector_empty(self)

    def size(self):
        return _matrix.vector_size(self)

    def swap(self, v):
        return _matrix.vector_swap(self, v)

    def begin(self):
        return _matrix.vector_begin(self)

    def end(self):
        return _matrix.vector_end(self)

    def rbegin(self):
        return _matrix.vector_rbegin(self)

    def rend(self):
        return _matrix.vector_rend(self)

    def clear(self):
        return _matrix.vector_clear(self)

    def get_allocator(self):
        return _matrix.vector_get_allocator(self)

    def pop_back(self):
        return _matrix.vector_pop_back(self)

    def erase(self, *args):
        return _matrix.vector_erase(self, *args)

    def __init__(self, *args):
        _matrix.vector_swiginit(self, _matrix.new_vector(*args))

    def push_back(self, x):
        return _matrix.vector_push_back(self, x)

    def front(self):
        return _matrix.vector_front(self)

    def back(self):
        return _matrix.vector_back(self)

    def assign(self, n, x):
        return _matrix.vector_assign(self, n, x)

    def resize(self, *args):
        return _matrix.vector_resize(self, *args)

    def insert(self, *args):
        return _matrix.vector_insert(self, *args)

    def reserve(self, n):
        return _matrix.vector_reserve(self, n)

    def capacity(self):
        return _matrix.vector_capacity(self)
    __swig_destroy__ = _matrix.delete_vector

# Register vector in _matrix:
_matrix.vector_swigregister(vector)

scientific = _matrix.scientific
fixed = _matrix.fixed
class base_matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getFormat(self):
        return _matrix.base_matrix_getFormat(self)

    def getFractionalDigits(self):
        return _matrix.base_matrix_getFractionalDigits(self)

    def setFormat(self, format):
        return _matrix.base_matrix_setFormat(self, format)

    def setFractionalDigits(self, fractionalDigits):
        return _matrix.base_matrix_setFractionalDigits(self, fractionalDigits)

    def __init__(self):
        _matrix.base_matrix_swiginit(self, _matrix.new_base_matrix())
    __swig_destroy__ = _matrix.delete_base_matrix

# Register base_matrix in _matrix:
_matrix.base_matrix_swigregister(base_matrix)

class matrix(base_matrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _matrix.matrix_swiginit(self, _matrix.new_matrix(*args))

    def size(self):
        return _matrix.matrix_size(self)

    def rows(self):
        return _matrix.matrix_rows(self)

    def columns(self):
        return _matrix.matrix_columns(self)

    def __iadd__(self, m):
        return _matrix.matrix___iadd__(self, m)

    def __isub__(self, m):
        return _matrix.matrix___isub__(self, m)

    def __imul__(self, scalar):
        return _matrix.matrix___imul__(self, scalar)

    def __itruediv__(self, *args):
        return _matrix.matrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __eq__(self, m):
        return _matrix.matrix___eq__(self, m)

    def inverse(self):
        return _matrix.matrix_inverse(self)

    def save_as(self, file_name):
        return _matrix.matrix_save_as(self, file_name)
    __swig_destroy__ = _matrix.delete_matrix

# Register matrix in _matrix:
_matrix.matrix_swigregister(matrix)


def output(m):
    return _matrix.output(m)

def __add__(a, b):
    return _matrix.__add__(a, b)

def __sub__(a, b):
    return _matrix.__sub__(a, b)

def __mul__(*args):
    return _matrix.__mul__(*args)

def __div__(*args):
    return _matrix.__div__(*args)


